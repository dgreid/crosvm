initSidebarItems({"enum":[["AsyncError",""],["Error",""],["Executor","An executor for scheduling tasks that poll futures to completion."],["SelectResult",""]],"fn":[["block_on","Run a future to completion on the current thread."],["complete2","Creates a combinator that runs the two given futures to completion, returning a tuple of the outputs each yields."],["complete3","Creates a combinator that runs the three given futures to completion, returning a tuple of the outputs each yields."],["complete4","Creates a combinator that runs the four given futures to completion, returning a tuple of the outputs each yields."],["complete5","Creates a combinator that runs the five given futures to completion, returning a tuple of the outputs each yields."],["empty",""],["run_one","Creates an Executor that runs one future to completion."],["run_one_poll","Creates a FdExecutor that runs one future to completion."],["run_one_uring","Creates a URingExecutor that runs one future to completion."],["select2","Creates a combinator that runs the two given futures until one completes, returning a tuple containing the result of the finished future and the still pending future."],["select3","Creates a combinator that runs the three given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."],["select4","Creates a combinator that runs the four given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."],["select5","Creates a combinator that runs the five given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."],["select6","Creates a combinator that runs the six given futures until one or more completes, returning a tuple containing the result of the finished future(s) and the still pending future(s)."]],"mod":[["mem",""],["sync",""]],"struct":[["AsyncWrapper","Simple wrapper struct to implement IntoAsync on foreign types."],["BlockingPool","A thread pool for running work that may block."],["Empty",""],["EventAsync","An async version of `sys_util::EventFd`."],["FdExecutor",""],["PollSource","Async wrapper for an IO source that uses the FD executor to drive async operations. Used by `IoSourceExt::new` when uring isn’t available."],["TimerAsync","An async version of sys_util::TimerFd."],["URingExecutor","An executor that uses io_uring for its asynchronous I/O operations. See the documentation of `Executor` for more details about the methods."],["UringSource","`UringSource` wraps FD backed IO sources for use with io_uring. It is a thin wrapper around registering an IO source with the uring that provides an `IoSource` implementation. Most useful functions are provided by ‘IoSourceExt’."]],"trait":[["IntoAsync","Marker trait signifying that the implementor is suitable for use with cros_async. Examples of this include File, and sys_util::net::UnixSeqpacket."],["IoSourceExt","Subtrait for general async IO."],["ReadAsync","Ergonomic methods for async reads."],["WriteAsync","Ergonomic methods for async writes."]],"type":[["AsyncResult",""],["Result",""]]});