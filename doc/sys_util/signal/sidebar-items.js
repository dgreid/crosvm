initSidebarItems({"enum":[["Error",""],["Signal",""]],"fn":[["SIGRTMAX","Returns the maximum (inclusive) real-time signal number."],["SIGRTMIN","Returns the minimum (inclusive) real-time signal number."],["block_signal","Masks given signal."],["clear_signal","Clears pending signal."],["clear_signal_handler","Resets the signal handler of signum `num` back to the default."],["create_sigset","Creates `sigset` from an array of signal numbers."],["get_blocked_signals","Retrieves the signal mask of the current thread as a vector of c_ints."],["has_default_signal_handler","Returns true if the signal handler for signum `num` is the default."],["kill","Safety"],["kill_tree","Terminates and reaps a child process. If the child process is a group leader, its children will be terminated and reaped as well. After the given timeout, the child process and any relevant children are killed (i.e. sent SIGKILL)."],["register_rt_signal_handler","Registers `handler` as the signal handler for the real-time signal with signum `num`."],["register_signal_handler","Registers `handler` as the signal handler of signum `num`."],["unblock_signal","Unmasks given signal."],["wait_for_signal","Wait for signal before continuing. The signal number of the consumed signal is returned on success. EAGAIN means the timeout was reached."]],"struct":[["KillOnDrop","Wraps a Child process, and calls kill_tree for its process group to clean it up when dropped."]],"trait":[["Killable","Trait for threads that can be signalled via `pthread_kill`."]],"type":[["SignalResult",""]]});