initSidebarItems({"constant":[["NUM_IOAPIC_PINS","Number of pins on the IOAPIC."]],"enum":[["Cap","A capability the kernelâ€™s KVM interface can possibly expose."],["Datamatch","Used in `Vm::register_ioevent` to indicate a size and optionally value to match."],["IoeventAddress","An address either in programmable I/O space or in memory mapped I/O space."],["IrqSource","A source of IRQs in an `IrqRoute`."],["PicId","Interrupt controller IDs"],["VcpuExit","A reason why a VCPU exited. One of these returns every time `Vcpu::run` is called."]],"fn":[["dirty_log_bitmap_size","Helper function to determine the size in bytes of a dirty log bitmap for the given memory region size."]],"struct":[["IrqRoute","A single route for an IRQ."],["Kvm","A wrapper around opening and using `/dev/kvm`."],["RunnableVcpu","A Vcpu that has a thread and can be run. Created by calling `to_runnable` on a `Vcpu`. Implements `Deref` to a `Vcpu` so all `Vcpu` methods are usable, with the addition of the `run` function to execute the guest."],["Vcpu","A wrapper around creating and using a VCPU. `Vcpu` provides all functionality except for running. To run, `to_runnable` must be called to lock the vcpu to a thread. Then the returned `RunnableVcpu` can be used for running."],["VcpuThread",""],["Vm","A wrapper around creating and using a VM."]],"type":[["CpuId","Wrapper for kvm_cpuid2 which has a zero length array at the end. Hides the zero length array behind a bounds check."]]});