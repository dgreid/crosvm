{"message":"unused attribute `must_use`","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"common/cros_async/src/select.rs","byte_start":863,"byte_end":947,"line_start":27,"line_end":27,"column_start":9,"column_end":93,"is_primary":true,"text":[{"text":"        #[must_use = \"Combinations of futures don't do anything unless run in an executor.\"]","highlight_start":9,"highlight_end":93}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"common/cros_async/src/select.rs","byte_start":2504,"byte_end":2976,"line_start":72,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"generate! {","highlight_start":1,"highlight_end":12},{"text":"    /// _Future for the [`select2`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select2, <_Fut1, _Fut2>),","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select3`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select3, <_Fut1, _Fut2, _Fut3>),","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select4`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select4, <_Fut1, _Fut2, _Fut3, _Fut4>),","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select5`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select5, <_Fut1, _Fut2, _Fut3, _Fut4, _Fut5>),","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select6`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select6, <_Fut1, _Fut2, _Fut3, _Fut4, _Fut5, _Fut6>),","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"generate!","def_site_span":{"file_name":"common/cros_async/src/select.rs","byte_start":739,"byte_end":2502,"line_start":22,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! generate {","highlight_start":1,"highlight_end":24},{"text":"    ($(","highlight_start":1,"highlight_end":8},{"text":"        $(#[$doc:meta])*","highlight_start":1,"highlight_end":25},{"text":"        ($Select:ident, <$($Fut:ident),*>),","highlight_start":1,"highlight_end":44},{"text":"    )*) => ($(","highlight_start":1,"highlight_end":15},{"text":"        #[must_use = \"Combinations of futures don't do anything unless run in an executor.\"]","highlight_start":1,"highlight_end":93},{"text":"        paste::item! {","highlight_start":1,"highlight_end":23},{"text":"            pub(crate) struct $Select<$($Fut: Future + Unpin),*> {","highlight_start":1,"highlight_end":67},{"text":"                $($Fut: MaybeDone<$Fut>,)*","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<$($Fut: Future + Unpin),*> $Select<$($Fut),*> {","highlight_start":1,"highlight_end":61},{"text":"            paste::item! {","highlight_start":1,"highlight_end":27},{"text":"                pub(crate) fn new($($Fut: $Fut),*) -> $Select<$($Fut),*> {","highlight_start":1,"highlight_end":75},{"text":"                    $Select {","highlight_start":1,"highlight_end":30},{"text":"                        $($Fut: maybe_done($Fut),)*","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<$($Fut: Future + Unpin),*> Future for $Select<$($Fut),*> {","highlight_start":1,"highlight_end":72},{"text":"            type Output = ($(SelectResult<$Fut>),*);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":88},{"text":"                let mut complete = false;","highlight_start":1,"highlight_end":42},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $Fut = Pin::new(&mut self.$Fut);","highlight_start":1,"highlight_end":57},{"text":"                    // The future impls `Unpin`, use `poll_unpin` to avoid wrapping it in","highlight_start":1,"highlight_end":90},{"text":"                    // `Pin` to call `poll`.","highlight_start":1,"highlight_end":45},{"text":"                    complete |= self.$Fut.poll_unpin(cx).is_ready();","highlight_start":1,"highlight_end":69},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if complete {","highlight_start":1,"highlight_end":30},{"text":"                    Poll::Ready(($(","highlight_start":1,"highlight_end":36},{"text":"                        match std::mem::replace(&mut self.$Fut, MaybeDone::Gone) {","highlight_start":1,"highlight_end":83},{"text":"                            MaybeDone::Future(f) => SelectResult::Pending(f),","highlight_start":1,"highlight_end":78},{"text":"                            MaybeDone::Done(o) => SelectResult::Finished(o),","highlight_start":1,"highlight_end":77},{"text":"                            MaybeDone::Gone => unreachable!(),","highlight_start":1,"highlight_end":63},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ), *))","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(unused_attributes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the built-in attribute `must_use` will be ignored, since it's applied to the macro invocation `paste::item`","code":null,"level":"note","spans":[{"file_name":"common/cros_async/src/select.rs","byte_start":956,"byte_end":967,"line_start":28,"line_end":28,"column_start":9,"column_end":20,"is_primary":true,"text":[{"text":"        paste::item! {","highlight_start":9,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"common/cros_async/src/select.rs","byte_start":2504,"byte_end":2976,"line_start":72,"line_end":87,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"generate! {","highlight_start":1,"highlight_end":12},{"text":"    /// _Future for the [`select2`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select2, <_Fut1, _Fut2>),","highlight_start":1,"highlight_end":31},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select3`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select3, <_Fut1, _Fut2, _Fut3>),","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select4`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select4, <_Fut1, _Fut2, _Fut3, _Fut4>),","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select5`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select5, <_Fut1, _Fut2, _Fut3, _Fut4, _Fut5>),","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    /// _Future for the [`select6`] function.","highlight_start":1,"highlight_end":46},{"text":"    (Select6, <_Fut1, _Fut2, _Fut3, _Fut4, _Fut5, _Fut6>),","highlight_start":1,"highlight_end":59},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"generate!","def_site_span":{"file_name":"common/cros_async/src/select.rs","byte_start":739,"byte_end":2502,"line_start":22,"line_end":70,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! generate {","highlight_start":1,"highlight_end":24},{"text":"    ($(","highlight_start":1,"highlight_end":8},{"text":"        $(#[$doc:meta])*","highlight_start":1,"highlight_end":25},{"text":"        ($Select:ident, <$($Fut:ident),*>),","highlight_start":1,"highlight_end":44},{"text":"    )*) => ($(","highlight_start":1,"highlight_end":15},{"text":"        #[must_use = \"Combinations of futures don't do anything unless run in an executor.\"]","highlight_start":1,"highlight_end":93},{"text":"        paste::item! {","highlight_start":1,"highlight_end":23},{"text":"            pub(crate) struct $Select<$($Fut: Future + Unpin),*> {","highlight_start":1,"highlight_end":67},{"text":"                $($Fut: MaybeDone<$Fut>,)*","highlight_start":1,"highlight_end":43},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<$($Fut: Future + Unpin),*> $Select<$($Fut),*> {","highlight_start":1,"highlight_end":61},{"text":"            paste::item! {","highlight_start":1,"highlight_end":27},{"text":"                pub(crate) fn new($($Fut: $Fut),*) -> $Select<$($Fut),*> {","highlight_start":1,"highlight_end":75},{"text":"                    $Select {","highlight_start":1,"highlight_end":30},{"text":"                        $($Fut: maybe_done($Fut),)*","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        impl<$($Fut: Future + Unpin),*> Future for $Select<$($Fut),*> {","highlight_start":1,"highlight_end":72},{"text":"            type Output = ($(SelectResult<$Fut>),*);","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {","highlight_start":1,"highlight_end":88},{"text":"                let mut complete = false;","highlight_start":1,"highlight_end":42},{"text":"                $(","highlight_start":1,"highlight_end":19},{"text":"                    let $Fut = Pin::new(&mut self.$Fut);","highlight_start":1,"highlight_end":57},{"text":"                    // The future impls `Unpin`, use `poll_unpin` to avoid wrapping it in","highlight_start":1,"highlight_end":90},{"text":"                    // `Pin` to call `poll`.","highlight_start":1,"highlight_end":45},{"text":"                    complete |= self.$Fut.poll_unpin(cx).is_ready();","highlight_start":1,"highlight_end":69},{"text":"                )*","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                if complete {","highlight_start":1,"highlight_end":30},{"text":"                    Poll::Ready(($(","highlight_start":1,"highlight_end":36},{"text":"                        match std::mem::replace(&mut self.$Fut, MaybeDone::Gone) {","highlight_start":1,"highlight_end":83},{"text":"                            MaybeDone::Future(f) => SelectResult::Pending(f),","highlight_start":1,"highlight_end":78},{"text":"                            MaybeDone::Done(o) => SelectResult::Finished(o),","highlight_start":1,"highlight_end":77},{"text":"                            MaybeDone::Gone => unreachable!(),","highlight_start":1,"highlight_end":63},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    ), *))","highlight_start":1,"highlight_end":27},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Poll::Pending","highlight_start":1,"highlight_end":34},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    )*)","highlight_start":1,"highlight_end":8},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused attribute `must_use`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcommon/cros_async/src/select.rs:27:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        #[must_use = \"Combinations of futures don't do anything unless run in an executor.\"]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgenerate! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// _Future for the [`select2`] function.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (Select2, <_Fut1, _Fut2>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (Select6, <_Fut1, _Fut2, _Fut3, _Fut4, _Fut5, _Fut6>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_attributes)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the built-in attribute `must_use` will be ignored, since it's applied to the macro invocation `paste::item`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcommon/cros_async/src/select.rs:28:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        paste::item! {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mgenerate! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// _Future for the [`select2`] function.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (Select2, <_Fut1, _Fut2>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    (Select6, <_Fut1, _Fut2, _Fut3, _Fut4, _Fut5, _Fut6>),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in the macro `generate` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
